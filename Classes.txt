1. Overview
+ Là ngôn ngữ hướng đối tượng với classes và tính kế thừa dựa trên mixin, mỗi đối tượng là một thể hiện của một lớp.
+ Tính kết thừa thì tất cả các lớp (ngoại trừ lớp cao nhất có chính xác một lớp cha), thân của lớp cha có thể tái sử dụng trong nhiều phân cấp lớp.

2. Class members
+ Đối tượng có các thành phần bao gồm functions và data (methods và instance variables)
+ Khi gọi method phải sử dụng qua một đối tượng, method có quyền truy cập vào functions và data của đối tượng.
+ Sử dụng dot (.) để truy xuất một instance và method

var point = Point(2, 2);
var a = p.y;
double distance = p.distanceTo(Point(4, 4)); 

+ Có thể sử dụng ?. để tránh các exception khi các toán hạng là null (ít dùng)

var a = p?.y

3. Using constructor
+ Ta có thể tạo một đối tượng sử dụng constructor, tên của constructor có thể là Classname hoặc Classname.identifier

var p1 = Point(2, 2); //Point is name of constructor
var p2 = Point.fromJson({'x': 1, 'y': 2});

+ Ta có thể sử dụng từ khóa new trước tên của constructor (ý nghĩa tương tự như phần trên)

+ Một số Class cung cấp một constant constructor, ta đặt từ khóa new trước tên của constructor

var a = const Point(2, 2);

+ Tạo ra hai constant constructor thì chúng chỉ là môt

+ Ta có thể đặt keywork const trước tất cả các thành phần của một constant context

const pointAndLine = const {
  'point': const [const ImmutablePoint(0, 0)],
  'line': const [const ImmutablePoint(1, 10), const ImmutablePoint(-2, 11)],
};

+ Ta có thể chỉ sử dụng const trước biến 

const pointAndLine = {
  'point': [ImmutablePoint(0, 0)],
  'line': [ImmutablePoint(1, 10), ImmutablePoint(-2, 11)],
};

4. Lấy ra một kiểu của đối tượng
Sử dụng property runtimeType sẽ trả về kiểu của đối tượng

print('The type of a is ${a.runtimeType}');

Nên sử dụng toán tử so sánh kiểu is!!

5. Instance variables
+ Khởi tạo một instance variables

Class Point {
	double? x;
	double? y;
	double z = 0;
}

+ Tất cả các biến chưa khởi tạo phải có giá trị là null
+ Tất cả các biến sẽ tạo ra một getter method ngầm định
+ Non-final instance variables and late final instance variables sẽ tạo ra một method setter ngầm định
+ Khi khởi tạo một non-late instance variable, ta cần phải đặt giá trị trước khi thực thi chương trình.
+ Instance variables có thể là final, chúng ta phải đặt giá trị của biến đó một lần trong constructor hoặc sử dụng initializer list

class ProfileMark {
  final String name;
  final DateTime start = DateTime.now();

  ProfileMark(this.name);
  ProfileMark.unnamed() : name = '';
}

+ Nếu ta muốn gán giá trị cho final instance variable sau khi hàm tạo được khởi chạy ta phải sử dụng từ khóa late (biến lười)

+ Các biến có dấu _ phía trước sẽ là một biến private chỉ sử dụng trong nội bộ của class

6. Constructor
+ Khai báo một constructor bằng cách tạo một hàm có cùng tên với lớp của nó (thêm, chọn tùy ý, bổ sung như mô tả trong phần name constructor), các tham số của constructor được gán cho các instance variable

class Point {
	double x = 0;
	double y = 0;
	
	Point(double x, double y) {
		this.x = x;
		this.y = y;
	}
}

+ Từ khóa this đề cập đến đối tượng hiện tại

+ Ta có thể gán tham số constructor thành một instance variable sử dụng từ khóa this lúc này các thuộc tính không cần phải được gán giá trị
+ Các đối tượng phải được gán bằng tên của hàm tạo của lớp

a. default constructor
Nếu không khai báo constructor, thì một default constructor sẽ được cung cấp mặc định (chúng không có các tham số)

class Point {
  double x = 0;
  double y = 0;
  String? z;
	
  // don't clare a constructor
}

void main() {
  var object = Point(); //default constructor
  print(object.z);
}

b. Constructors aren't inherited
+ Lớp con không kế thừa constructors từ lớp cha của chúng
+ Một lớp con khai báo không có hàm tạo chỉ có hàm tạo mặc định (Không có đối số, không có tên khởi tạo)

c. Named constructors
+ Sử dụng named constructor để triển khai nhiều constructors khác cho một class or để cung cấp cú pháp rõ ràng

const double xOrigin = 0;
const double yOrigin = 0;

class Point {
  double x = 0;
  double y = 0;

  Point(this.x, this.y);

  // Named constructor
  Point.origin()
      : x = xOrigin,
        y = yOrigin;
}

+ Nếu một lớp con được tạo với named constructor được xác định trong lớp cha, thì ta phải triển khai constructor đó trong lớp con.

d. Invoking a non-default superclass constructor
+ Theo mặc định thì một constructor lớp con có thể gọi constructor không đối số, không tên của lớp cha 
+ Nếu initializer list đang được sử dụng, nó sẽ được thực thi trước khi lớp cha được gọi
+ Các bước sử dụng như sau:
b1: initializer list
b2: constructor không arg lớp cha
b3: constructor không arg lớp main

+ Nếu lớp cha không có constructor không đối số, không tên, thì ta bắt buộc phải gọi một trong các constructor trong lớp cha
+ Chỉ định constructor lớp cha sau dấu : ngay trước body của constructor (nếu có), nếu lớp cha có constructor thì sau super không cần tên

class Person {
  String? firstName;
  
  //default
  Person(name, {int? age}) {
    this.firstName = name + age;
  }
  //Named Constructor
  Person.fromJson(Map data) {
    print('in Person');    
  }
}

class Employees extends Person {
  // Person doesn't have default constructor
  // you must call super.fromJson(Map data)
  Employees.fromJson(Map data) : super.fromJson(data) {
    print('In Employee');
  }
}

void main() {
  var employee = Employees.fromJson({});
  print(employee);
}

+ Đối số của hàm tạo lớp cha có thể là một biểu thức ví dụ như là lời gọi hàm

class Employee extends Person {
  Employee() : super.fromJson(fetchDefaultData()); // call function
  // ···
}

+ Chú ý các đối số của constructor lớp cha không có quyền truy cập vào this, ví dụ các đối số có thể gọi static method nhưng không gọi instance method

e. Initializer list
Ngoài việc gọi constructor của lớp cha, ta có thể khởi tạo instance variables trước body constructor, phân tách các initializers bằng dấu ,

Point.fromJson(Map<String, double> json)
    : x = json['x']!,
      y = json['y']! {
  print('In Point.fromJson(): ($x, $y)');
}

+ Không sử dụng this
+ Ta có thể xác nhận đầu vào khi sử dụng assert trong initializer list

Point.withAssert(this.x, this.y) : assert(x >= 0) {
  print('In Point.withAssert(): ($x, $y)');
}

+ Initializer lists hay sử dụng cho trường final 

import 'dart:math';
class Point {
  final double x;
  final double y;
  final double distanceFromOrigin;

  Point(double x, double y)
      : x = x,
        y = y,
        distanceFromOrigin = sqrt(x * x + y * y);
}

f. Redirecting constructor
+ Một số constructor sử dụng với mục đích chuyển hướng tới constructor khác trong cùng class làm hàm tạo chính

class Point {
  double? x, y;
  // main constructor
  Point(this.x, this.y);
  
  // Delegates to the main constructor
  Point.aLongXAxis(double x) : this(x, 0);
}

g. Constant constructor
+ Sử dụng khi class cung cấp đến một đối tượng không đổi, sử dụng keyword const và tất cả các instance variable là final

class Point {
  final double x, y;
  
  const Point(this.x, this.y);
}

+ Các constant constructor không phải lúc nào cũng tạo ra các hằng số

h. Factory constructors
+ Factory constructors sử dụng để tạo các đối tượng mà không để lộ logic tạo cho các đối tượng và tham chiếu đến các đối tượng mới bằng giao diện chung
+ factory keyword triển khai một hàm không phải lúc nào cũng tạo một phiên bản mới của lớp đó
+ ví dụ một factory constructor có thể trả về một thể hiện từ bộ nhớ đệm hoặc nó có thể trả về một thể hiện của lớp con
+ Một cách sử dụng khác là triển khai một biến final mà không thể xử lý được trong danh sách trình khởi tạo

- Cơ bản
class Dog {
  String? name;
  Dog(this.name);
  
  //Constructor factory
  factory Dog.createDog({required String name, bool guarDog = false}) {
    if (guarDog) {
      return Labrador(name);
    } else {
      return Doberman(name);
    }
  }
}

class Labrador extends Dog {
  Labrador(String name) : super(name);
}

class Doberman extends Dog {
  Doberman(String name) : super(name);
}

- Triển khai bộ nhớ đệm
class Logger {
  final String name;
  
  static final Map<String, Logger> _cache =
      <String, Logger>{};

  factory Logger(String name) {
    return _cache.putIfAbsent(
        name, () => Logger._internal(name));
  }
  //private constructor
  Logger._internal(this.name){
     print("New logger created with name ${this.name}");
  }
  void log(String msg) {
    print("${this.name} : $msg");
  }
}

class A {
  late final Logger _logger;
  
  
  A(){
    _logger = Logger('A');
  }
}

void main() {
  // Cơ bản
  var dogLab = Dog.createDog(name : 'Kiki', guarDog : true);
  var dogDob = Dog.createDog(name : 'Mick', guarDog: false);
  
  //Triển khai bộ nhớ đệm
  for(int i = 1; i <= 5; i++){
       print("Creating instance $i");
       var a = A();
       print(""); //newline
   }
}

+ Factory constructors không truy xuất this
+ Gọi factory constructor giống hệt như cách gọi constructor khác

7. Method
+ Là một hàm cung cấp hành vi cho đối tượng

a. Instance method
+ Instance method trong một đối tượng có thể truy xuất vào instance variable và this

import 'dart:math';

class Point {
  double x = 0;
  double y = 0;

  Point(this.x, this.y);

  double distanceTo(Point other) {
    var dx = x - other.x;
    var dy = y - other.y;
    return sqrt(dx * dx + dy * dy);
  }
}

+ Các hàm có dấu _ phía trước là các hàm private chỉ sử dụng trong nội bộ lớp

b. Operators
+ Là một instance method với tên đặc biệt (Bảng trong docs)
+ Toán tử != có thể thay cho !()
+ Khai báo toán tử được xác định bằng cách sử dụng keyword operator

class Vector {
  final int x, y;

  Vector(this.x, this.y);

  Vector operator +(Vector v) => Vector(x + v.x, y + v.y);
  Vector operator -(Vector v) => Vector(x - v.x, y - v.y);

  // Operator == and hashCode not shown.
  // ···
}

void main() {
  final v = Vector(2, 3);
  final w = Vector(2, 2);

  assert(v + w == Vector(4, 5));
  assert(v - w == Vector(0, 1));
}

c. Getters and Setters
+ Là các method đặc biệt cung cấp cho nhận và xuất thuộc tính của đối tượng
+ Ta có thể tạo các thuộc tính bổ sung khi sử dụng getters và setters, sử dụng từ khóa get và set

class Rectangle {
  double left, top, width, height;

  Rectangle(this.left, this.top, this.width, this.height);

  // Define two calculated properties: right and bottom.
  double get right => left + width;
  set right(double value) => left = value - width;
  double get bottom => top + height;
  set bottom(double value) => top = value - height;
}

void main() {
  var rect = Rectangle(3, 4, 20, 15);
  print(rect.left);
  rect.right = 12; //Using set right property 
  print(rect.left);
}

+ Để làm việc với các toán tử (++), thì chúng phải được getter chính xác một lần và lưu giá trị của nó trong một biến tạm thời

d. Abstract methods
+ Instance, getter, and setter methods có thể sử dụng abstract, xác định cấu hình nhưng việc triển khai nó được sử dụng cho các lớp khác

+ Sử dụng abstract method sử dụng dấu ; thay cho phần thân của method

abstract class Doer {
  // Define instance variables and methods...

  void doSomething(); // Define an abstract method.
}

class EffectiveDoer extends Doer {
  void doSomething() {
    // Provide an implementation, so the method is not abstract here...
  }
}

8. Abstract classes
+ Sử dụng abstract để định nghĩa ra abstract class - một lớp không thể được khởi tạo.
+ Abstract classes được sử dụng để xác định interfaces, thường với một số triển khai, nếu muốn abstract class có thể khởi tạo được hãy xác định một factory constructor
+ Các abstract class có các abtract method 

// This class is declared abstract and thus
// can't be instantiated.
abstract class AbstractContainer {
  // Define constructors, fields, methods...

  void updateChildren(); // Abstract method.
}

9. Implicit interfaces
+ Mỗi lớp định nghĩa ngầm định một interfaces chứa tất cả các instance members của lớp và bất kì interfaces mà nó thực hiện
+ Nếu bạn muốn tạo một lớp A hỗ trợ API của lớp B mà không kế thừa việc triển khai của B, thì lớp A nên triển khai interfaces lớp B
+ Một lớp triển khai một hoặc nhiều interfaces bằng cách khai báo trong implements clause và cung cấp API theo yêu cầu của interfaces

// A person. The implicit interface contains greet().
class Person {
  // In the interface, but visible only in this library.
  final String _name;

  // Not in the interface, since this is a constructor.
  Person(this._name);

  // In the interface.
  String greet(String who) => 'Hello, $who. I am $_name.';
}

// An implementation of the Person interface.
class Impostor implements Person {
  String get _name => '';

  String greet(String who) => 'Hi $who. Do you know who I am?';
}

String greetBob(Person person) => person.greet('Bob');

void main() {
  print(greetBob(Person('Kathy')));
  print(greetBob(Impostor()));
}
+ Một lớp có thể được triển khai được nhiều interfaces

class Point implements Comparable, Location {...}

10. Extending a class
+ Sử dụng extends để tạo một lớp con 

class Student {
  String? name;
  int? age;
  String? language;
  int level = 0;
  
  Student(this.name, this.age);
  
  //declare a method
  learn(String language) {
    language = language;
    print(language);
  }
}

class Techteam extends Student {
  Techteam(name, age) : super(name, age);
  int knowledge(int year) {
    learn('Dart');
    level += year;
    return level;
  }
}

void main() {
  var long = Techteam('Long', 24);
  print(long.knowledge(2));
}

a. Overriding members
Các lớp con có thể ghi đè  instance methods (bao gồm operators), getters, and setters, sử dụng @override để ghi đè một members

class Techteam extends Student {
  Techteam(name, age) : super(name, age);
//   @override
  learn(String language) {
    language = language + ' ' + 'Tutorial';
    print(language);
  }
}

+ Một phương pháp ghi đè theo một phương thức có thể thực hiện bằng một số cách sau:
- Kiểu trả về phải cùng kiểu với kiểu trả về của phương thức ghi đè
- Kiểu của các loại đối số phải cùng loại với các loại đối số của phương thức ghi đè
- Nếu phương thức ghi bị đè chấp nhận n tham số vị trí, thì phương thức ghi đè phải
- Một generic method không thể ghi đè một non-generic method và ngược lại 

b. noSuchMethod()
+ Khi phát hiện và truy xuất khi đoạn mã sử dụng một method không tồn tại, hoặc một biến thể hiện không tồn tại, ta có thể ghi đè nosuchMethod()

class Person {
  @override  //overring noSuchMethod
    noSuchMethod(Invocation invocation) => 'Got the ${invocation.memberName}'
    "with arguments ${invocation.positionalArguments}";
}

main(List<String> args) {
  dynamic person = Person(); //dynamic type
  print(person.missing('20', 'Long'));
}

11. Extension methods
Sử dụng để thêm một chức năng vào các libraries
import 'string_apis.dart';
main(List<String> args) {
print('42'.padLeft(5)); // Use a String method.
print('42'.parseInt()); // Use an extension method.
}

12. Enumerated types
Là một kiểu đặc biệt của class biểu diễn một số lượng cố định các giá trị không đổi

a. Using enums
+ Khai báo một kiểu enumerated sử dụng enum keyword
+ Mỗi giá trị của enum tương ứng với 1 index 
enum HoaQua { Apple, Pear, Grapes, Banana, Orange }
void main() {  
  print(HoaQua.Apple.index); // 0
}

+ Lấy ra một list các giá trị sử dụng values
enum HoaQua { Apple, Pear, Grapes, Banana, Orange }
void main() {  
  print(HoaQua.values);
}

+ Có thể sử dụng enum trong câu điều kiện 
var aColor = Color.blue;

switch (aColor) {
  case Color.red:
    print('Red as roses!');
    break;
  case Color.green:
    print('Green as grass!');
    break;
  default: // Without this, you see a WARNING.
    print(aColor); // 'Color.blue'
}

+ Kiểu enum có các giới hạn sau
- Không thể phân lớp, mix in hoặc triển khai một enum
- Không thể khởi tạo enum một cách rõ ràng

13. Add feature to a class: mixins
+ Mixing là cách để tái sử dụng một code của class trong nhiều hệ thống phân cấp lớp
+ Để sử dụng mixin, sử dụng từ khóa with theo sau bởi một hoặc nhiều mixins name
+ Để thực thi mixin, tạo một lớp kế thừa một đối tượng và khai báo hàm không tham số

class Musician extends Performer with Musical {
  // ···
}

class Maestro extends Person
    with Musical, Aggressive, Demented {
  Maestro(String maestroName) {
    name = maestroName;
    canConduct = true;
  }
}

+ Trừ khi bạn muốn mixin của mình có thể sử dụng được như một lớp thông thường, hãy sử dụng từ khóa mixin thay vì lớp


mixin Musical {
  bool canPlayPiano = false;
  bool canCompose = false;
  bool canConduct = false;

  void entertainMe() {
    if (canPlayPiano) {
      print('Playing piano');
    } else if (canConduct) {
      print('Waving hands');
    } else {
      print('Humming to self');
    }
  }
}

+ Đôi khi bạn có thể muốn hạn chế các kiểu có thể sử dụng mixin. Ví dụ: mixin có thể phụ thuộc vào việc có thể gọi một phương thức mà mixin không xác định
+ Để hạn chế việc sử dụng mixin bằng cách sử dụng từ khóa on để chỉ định lớp cha bắt buộc

class Musician {
  // ...
}
mixin MusicalPerformer on Musician {
  // ...
}
class SingerDancer extends Musician with MusicalPerformer {
  // ...
}


14. Class variable and methods
Sử dụng từ khóa static để khởi tạo một variable hoặc một method toàn lớp

a. Static variabel
Sử dụng cho trạng thái và hằng số toàn lớp
class Queue {
  static const initialCapacity = 16;
  // ···
}

void main() {
  print(Queue.initialCapacity);
}


Các Static variable cần phải được khởi tạo cho đến khi sử dụng chúng

b. Static method
Các phương thức tĩnh không có quyền truy cập vào instance members, nhưng có quyền truy cập vào các static variable

class Point {
  static double x = 1;
  static double y = 1;
  
  static double distanceBetween(double a) {
    x = a;
    return a;
  }
}

void main() {
  var distance = Point.distanceBetween(1.5);
  print(Point.x);
}



